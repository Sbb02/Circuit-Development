$date
	Thu Mar 17 21:26:11 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module brainless_top $end
$scope module brainless $end
$var wire 1 ! acc_to_db $end
$var wire 4 " accum [3:0] $end
$var wire 4 # addr_bus [3:0] $end
$var wire 4 $ alu_out [3:0] $end
$var wire 1 % arith $end
$var wire 1 & clk $end
$var wire 4 ' data_bus [3:0] $end
$var wire 4 ( data_in [3:0] $end
$var wire 1 ) invert $end
$var wire 1 * load_acc $end
$var wire 1 + pass $end
$var wire 1 , read $end
$var wire 1 - reset $end
$var wire 1 . write $end
$var wire 4 / s1 [3:0] $end
$var wire 4 0 s0 [3:0] $end
$var wire 4 1 data_bus_temp [3:0] $end
$var wire 4 2 alu_out_temp [3:0] $end
$var wire 4 3 accum_temp [3:0] $end
$scope module alu_i0 $end
$var wire 1 % arith $end
$var wire 1 4 cin $end
$var wire 1 ) invert $end
$var wire 1 + pass $end
$var wire 4 5 y [3:0] $end
$var wire 4 6 s0 [3:0] $end
$var wire 1 7 overfl $end
$var wire 1 8 cout $end
$var wire 4 9 b [3:0] $end
$var wire 4 : a [3:0] $end
$scope module and_add_i1 $end
$var wire 1 % add $end
$var wire 1 4 cin $end
$var wire 1 + pass $end
$var wire 4 ; y [3:0] $end
$var wire 4 < s2 [3:0] $end
$var wire 4 = s1 [3:0] $end
$var wire 4 > s0 [3:0] $end
$var wire 1 7 overfl $end
$var wire 1 8 cout $end
$var wire 4 ? b [3:0] $end
$var wire 4 @ a [3:0] $end
$scope module four_bit_adder_i0 $end
$var wire 1 4 cin $end
$var wire 1 8 cout $end
$var wire 1 7 overfl $end
$var wire 4 A y [3:0] $end
$var wire 1 B s9 $end
$var wire 1 C s8 $end
$var wire 1 D s7 $end
$var wire 1 E s6 $end
$var wire 1 F s5 $end
$var wire 1 G s4 $end
$var wire 1 H s3 $end
$var wire 1 I s2 $end
$var wire 1 J s14 $end
$var wire 1 K s13 $end
$var wire 1 L s12 $end
$var wire 1 M s11 $end
$var wire 1 N s10 $end
$var wire 1 O s1 $end
$var wire 1 P s0 $end
$var wire 1 Q cout_temp $end
$var wire 4 R b [3:0] $end
$var wire 4 S a [3:0] $end
$scope module full_adder_i0 $end
$var wire 1 H a $end
$var wire 1 D b $end
$var wire 1 4 cin $end
$var wire 1 K cout $end
$var wire 1 L sum $end
$upscope $end
$scope module full_adder_i1 $end
$var wire 1 I a $end
$var wire 1 E b $end
$var wire 1 K cin $end
$var wire 1 N cout $end
$var wire 1 J sum $end
$upscope $end
$scope module full_adder_i2 $end
$var wire 1 O a $end
$var wire 1 F b $end
$var wire 1 N cin $end
$var wire 1 C cout $end
$var wire 1 M sum $end
$upscope $end
$scope module full_adder_i3 $end
$var wire 1 P a $end
$var wire 1 G b $end
$var wire 1 C cin $end
$var wire 1 Q cout $end
$var wire 1 B sum $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i1 $end
$var wire 4 T a [3:0] $end
$var wire 4 U b [3:0] $end
$var wire 1 % sel $end
$var wire 4 V y [3:0] $end
$var wire 1 W s9 $end
$var wire 1 X s8 $end
$var wire 1 Y s7 $end
$var wire 1 Z s6 $end
$var wire 1 [ s5 $end
$var wire 1 \ s4 $end
$var wire 1 ] s3 $end
$var wire 1 ^ s2 $end
$var wire 1 _ s11 $end
$var wire 1 ` s10 $end
$var wire 1 a s1 $end
$var wire 1 b s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 b a $end
$var wire 1 a b $end
$var wire 1 % s $end
$var wire 1 ^ y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 ] a $end
$var wire 1 \ b $end
$var wire 1 % s $end
$var wire 1 [ y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 Z a $end
$var wire 1 Y b $end
$var wire 1 % s $end
$var wire 1 X y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 W a $end
$var wire 1 ` b $end
$var wire 1 % s $end
$var wire 1 _ y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 4 c a [3:0] $end
$var wire 1 + sel $end
$var wire 4 d y [3:0] $end
$var wire 1 e s9 $end
$var wire 1 f s8 $end
$var wire 1 g s7 $end
$var wire 1 h s6 $end
$var wire 1 i s5 $end
$var wire 1 j s4 $end
$var wire 1 k s3 $end
$var wire 1 l s2 $end
$var wire 1 m s11 $end
$var wire 1 n s10 $end
$var wire 1 o s1 $end
$var wire 1 p s0 $end
$var wire 4 q b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 p a $end
$var wire 1 o b $end
$var wire 1 + s $end
$var wire 1 l y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 k a $end
$var wire 1 j b $end
$var wire 1 + s $end
$var wire 1 i y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 h a $end
$var wire 1 g b $end
$var wire 1 + s $end
$var wire 1 f y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 e a $end
$var wire 1 n b $end
$var wire 1 + s $end
$var wire 1 m y $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_neg_i0 $end
$var wire 1 ) invert $end
$var wire 1 % neg $end
$var wire 1 r s1 $end
$var wire 4 s y [3:0] $end
$var wire 4 t s0 [3:0] $end
$var wire 1 u cry $end
$var wire 4 v a [3:0] $end
$scope module incrementer_i0 $end
$var wire 4 w a [3:0] $end
$var wire 1 r inc $end
$var wire 4 x y [3:0] $end
$var wire 1 y s9 $end
$var wire 1 z s8 $end
$var wire 1 { s7 $end
$var wire 1 | s6 $end
$var wire 1 } s5 $end
$var wire 1 ~ s4 $end
$var wire 1 !" s3 $end
$var wire 1 "" s2 $end
$var wire 1 #" s10 $end
$var wire 1 $" s1 $end
$var wire 1 %" s0 $end
$var wire 1 u cry $end
$scope module half_adder_i0 $end
$var wire 1 y a $end
$var wire 1 r b $end
$var wire 1 { cry $end
$var wire 1 #" sum $end
$upscope $end
$scope module half_adder_i1 $end
$var wire 1 | a $end
$var wire 1 { b $end
$var wire 1 ~ cry $end
$var wire 1 z sum $end
$upscope $end
$scope module half_adder_i2 $end
$var wire 1 !" a $end
$var wire 1 ~ b $end
$var wire 1 $" cry $end
$var wire 1 } sum $end
$upscope $end
$scope module half_adder_i3 $end
$var wire 1 %" a $end
$var wire 1 $" b $end
$var wire 1 u cry $end
$var wire 1 "" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 1 ! sel $end
$var wire 4 &" y [3:0] $end
$var wire 1 '" s9 $end
$var wire 1 (" s8 $end
$var wire 1 )" s7 $end
$var wire 1 *" s6 $end
$var wire 1 +" s5 $end
$var wire 1 ," s4 $end
$var wire 1 -" s3 $end
$var wire 1 ." s2 $end
$var wire 1 /" s11 $end
$var wire 1 0" s10 $end
$var wire 1 1" s1 $end
$var wire 1 2" s0 $end
$var wire 4 3" b [3:0] $end
$var wire 4 4" a [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 2" a $end
$var wire 1 1" b $end
$var wire 1 ! s $end
$var wire 1 ." y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 -" a $end
$var wire 1 ," b $end
$var wire 1 ! s $end
$var wire 1 +" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 *" a $end
$var wire 1 )" b $end
$var wire 1 ! s $end
$var wire 1 (" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 '" a $end
$var wire 1 0" b $end
$var wire 1 ! s $end
$var wire 1 /" y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i4 $end
$var wire 4 5" a [3:0] $end
$var wire 1 , sel $end
$var wire 4 6" y [3:0] $end
$var wire 1 7" s9 $end
$var wire 1 8" s8 $end
$var wire 1 9" s7 $end
$var wire 1 :" s6 $end
$var wire 1 ;" s5 $end
$var wire 1 <" s4 $end
$var wire 1 =" s3 $end
$var wire 1 >" s2 $end
$var wire 1 ?" s11 $end
$var wire 1 @" s10 $end
$var wire 1 A" s1 $end
$var wire 1 B" s0 $end
$var wire 4 C" b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 B" a $end
$var wire 1 A" b $end
$var wire 1 , s $end
$var wire 1 >" y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 =" a $end
$var wire 1 <" b $end
$var wire 1 , s $end
$var wire 1 ;" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 :" a $end
$var wire 1 9" b $end
$var wire 1 , s $end
$var wire 1 8" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 7" a $end
$var wire 1 @" b $end
$var wire 1 , s $end
$var wire 1 ?" y $end
$upscope $end
$upscope $end
$scope module four_bit_reg_i1 $end
$var wire 1 & clk $end
$var wire 4 D" d [3:0] $end
$var wire 1 * enable $end
$var wire 4 E" q [3:0] $end
$var wire 1 - reset $end
$var wire 1 F" s8 $end
$var wire 1 G" s7 $end
$var wire 1 H" s6 $end
$var wire 1 I" s5 $end
$var wire 1 J" s4 $end
$var wire 1 K" s3 $end
$var wire 1 L" s2 $end
$var wire 1 M" s1 $end
$var wire 4 N" s0 [3:0] $end
$var wire 4 O" q_temp [3:0] $end
$scope module DIG_D_FF_AS_1bit_i1 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 M" D $end
$var wire 1 L" Q $end
$var wire 1 P" Set $end
$var wire 1 Q" \~Q $end
$var reg 1 R" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i2 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 K" D $end
$var wire 1 J" Q $end
$var wire 1 S" Set $end
$var wire 1 T" \~Q $end
$var reg 1 U" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i3 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 I" D $end
$var wire 1 H" Q $end
$var wire 1 V" Set $end
$var wire 1 W" \~Q $end
$var reg 1 X" state $end
$upscope $end
$scope module DIG_D_FF_AS_1bit_i4 $end
$var wire 1 & C $end
$var wire 1 - Clr $end
$var wire 1 G" D $end
$var wire 1 F" Q $end
$var wire 1 Y" Set $end
$var wire 1 Z" \~Q $end
$var reg 1 [" state $end
$upscope $end
$scope module four_bit_mux_i0 $end
$var wire 4 \" a [3:0] $end
$var wire 4 ]" b [3:0] $end
$var wire 1 * sel $end
$var wire 4 ^" y [3:0] $end
$var wire 1 _" s9 $end
$var wire 1 `" s8 $end
$var wire 1 a" s7 $end
$var wire 1 b" s6 $end
$var wire 1 c" s5 $end
$var wire 1 d" s4 $end
$var wire 1 e" s3 $end
$var wire 1 f" s2 $end
$var wire 1 g" s11 $end
$var wire 1 h" s10 $end
$var wire 1 i" s1 $end
$var wire 1 j" s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 j" a $end
$var wire 1 i" b $end
$var wire 1 * s $end
$var wire 1 f" y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 e" a $end
$var wire 1 d" b $end
$var wire 1 * s $end
$var wire 1 c" y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 b" a $end
$var wire 1 a" b $end
$var wire 1 * s $end
$var wire 1 `" y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 _" a $end
$var wire 1 h" b $end
$var wire 1 * s $end
$var wire 1 g" y $end
$upscope $end
$upscope $end
$upscope $end
$scope module program_ram_i3 $end
$var wire 4 k" addr [3:0] $end
$var wire 1 & clk $end
$var wire 4 l" data_in [3:0] $end
$var wire 1 . write $end
$var wire 4 m" data_out [3:0] $end
$scope module DIG_RAMDualPort_i0 $end
$var wire 4 n" A [3:0] $end
$var wire 1 & C $end
$var wire 4 o" D [3:0] $end
$var wire 4 p" Din [3:0] $end
$var wire 1 q" ld $end
$var wire 1 . str $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1q"
b0 p"
b1011 o"
b0 n"
b1011 m"
b0 l"
b0 k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
b0 ^"
b0 ]"
b0 \"
0["
1Z"
0Y"
0X"
1W"
0V"
0U"
1T"
0S"
0R"
1Q"
0P"
b0 O"
b0 N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
b0 E"
b0 D"
b1011 C"
0B"
1A"
1@"
0?"
0>"
0="
0<"
0;"
0:"
19"
08"
07"
b0 6"
b0 5"
b0 4"
b0 3"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
b0 &"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
b0 x
b0 w
b0 v
0u
b0 t
b0 s
0r
b0 q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
b0 d
b0 c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b1011 /
0.
1-
0,
0+
0*
0)
b0 (
b0 '
0&
0%
b0 $
b0 #
b0 "
0!
$end
#5
1&
#10
1a
1Y
1`
1B
1J
b1011 >
b1011 A
b1011 U
1L
1o
1P
1g
1I
1n
1H
1""
1z
b1011 6
b1011 @
b1011 S
b1011 q
b1011 s
b1011 x
1#"
1%"
1|
1y
b1011 t
b1011 w
1."
1("
b1011 '
b1011 1
b1011 :
b1011 v
b1011 &"
b1011 l"
b1011 p"
1/"
12"
1*"
1'"
1>"
18"
b1011 0
b1011 4"
b1011 6"
1?"
1="
17"
1,
1.
0-
b1 #
b1 k"
b1 n"
b101 (
b101 5"
0&
#15
1&
#20
1i"
1a"
1h"
1l
1f
b1011 $
b1011 2
b1011 5
b1011 ;
b1011 d
b1011 D"
b1011 ]"
1m
1+
0&
#25
1&
#30
0a
0Y
0`
0B
0J
b0 >
b0 A
b0 U
0L
0o
0P
0g
0I
0n
0H
0""
0z
b0 6
b0 @
b0 S
b0 q
b0 s
b0 x
0#"
0%"
0|
0y
b0 t
b0 w
0."
0("
b0 '
b0 1
b0 :
b0 v
b0 &"
b0 l"
b0 p"
0/"
02"
0*"
0'"
0i"
0a"
0h"
0>"
08"
b0 0
b0 4"
b0 6"
0?"
0l
0f
b0 $
b0 2
b0 5
b0 ;
b0 d
b0 D"
b0 ]"
0m
0="
07"
0,
0.
0+
b0 #
b0 k"
b0 n"
b0 (
b0 5"
0&
#35
1&
#40
0&
#45
1&
#50
0&
#55
1&
#60
0&
#65
1&
#70
0&
#75
1&
#80
1-
0&
